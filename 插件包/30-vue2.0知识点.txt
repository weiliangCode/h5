<router-link to="/alert">Alert消息提示</router-link>				//路由跳转
<router-view></router-view>			//存放子页面的容器
<slot></slot> 	//元素作为组件模板之中的内容分发插槽。 <slot> 元素自身将被替换。

//------------------------------------------
//自定义组件vue文件结构
<template>

</template>

<script>
	export default {

	}
</script>

<style >

</style >
//------------------------------------------
//自定义组件
export default {
	name:组件名,
	components:{},	//用于自义子组件
	data () {			//用于存放数据
		return {
			变量名：初始值
		}	
	}
	props:{			//用于接收父组件传递过来的数据
		变量名:{
				type:验证类型,
				default:默认值,	
		},
	},		
	computed:{},	//用于处理计算
	methods:{}		//用于存放自定义事件
}

//---子组件传父子组件传递数据-----
this.$emit("on-ok"，data);				//主动触发on-ok方法，data为向父组件传递的数据	
<自定义组件 @on-ok="upup"></自定义组件>	//监听子组件触发的on-ok事件,然后调用upup方法

this.$parent 		//访问父组件
this.$children 		//访问子组件（是一个数组）
this.$root 			//根实例的后代访问根实例

ref在官网上的解释简单来说就是用来绑定某个dom元素，或者来说用来绑定某个组件，然后在$refs里面调用
<div class="touchscroll" ref='div'>		//绑定
this.$refs.div.scrollTop.				//调用




//------------------------------------------
//引入外部less文件
<style lang="less" scoped>
	@import "../../style/components/alert.less";
</style>
//引入外部文件
import Tabs from './tabs.vue';
//导出文件
export default Tabs;


//-----------------------------------------
//数据请求
axios